#!/usr/bin/env dart

import 'dart:io';
import 'dart:async';

// simple cmd tool to create and link dart library structure

final pubtemp = "name: @name\ndescription: @description\nversion: 0.0.1\nauthor: ";
final platform = Platform.environment;
//final packages = new Path(platform['HOME'].concat('/Pubpackages'));
final home = new Path(Directory.current.path);
final packages = home.join(new Path("packages"));
final makeOption = new RegExp(r'^\w+:');
final help = """Dam Version: 0.0.1

Details: Due to the cumbersome recurring case of dealing with packages folder and the fact that pub unlike
like node transverse the folder tree for a packages folder,i decided to create this small utility that 
provides these needs with the exception that instead of transversing we instead run the dam command at the library root 
folder and either add a folder,init a new packages folder or create a new project libary

Options:
""";
final inithelp = """
  :init (creates a new dart packages folder if it exists do nothing)
""";
final makehelp = """
  :create (creates a new dart package folder with the linked packages folder)
        eg. dam :create name:'hello' desc:'say hello' dirs:lib,spec,framework
		note: please ensure to follow the order as above.
""";
// final linkhelp = """
//   :link (simple links into the directory the global packages folder)
// """;
final addhelp = """
  :add (add a new dir that will be linked with the packages folder)
        eg. dam :add framework,extensions,apps
""";

void makeDir(Path path,[void callback(d)]){
	new Directory.fromPath(path).create(recursive:true).then((dir){
		print("---> Adding $dir!");
        if(callback != null) callback(dir);
	});
}

void createPubSpec(Path path,data){
  try{
      var spec = new File.fromPath(path.join(new Path('pubspec.yaml'))).openWrite();
      spec.write(data);
      print('Adding pubspec.yaml to $path');
      spec.close();
  }catch(e){
      print(e);
      throw new Exception('Error creating pubspec.yaml!');
  }
}

void make(List args){
      if(args.isEmpty || args.length > 3) return (print('Incorrect Arguments!\n $makehelp'));
      var hasDesc = (args.length >= 2 && new RegExp(r'^desc:').hasMatch(args[1])) ? true : false;
      var hasDirs = (args.length >= 3 && new RegExp(r'^dirs:').hasMatch(args[2])) ? true : false;
      
      var projName = args[0].split(':')[1];
      var projDesc = hasDesc ? args[1].split(':')[1] : null;
      var projDirs = hasDirs ? args[2].split(':')[1].split(','): null;
      var template = pubtemp;

      template = template.replaceAll('@name',projName);
      if(hasDesc) template = template.replaceAll('@description',projDesc);
      
      makeDir(home.join(new Path(projName)),(dir){
              var route = new Path(dir.path);
			  var pkgs = route.join(new Path("packages"));
              makeDir(pkgs);
              createPubSpec(route,template);
              if(hasDirs){
                  projDirs.forEach((n){
                      makeDir(route.join(new Path(n)),(dirs){
                            link(dirs.path,pkgs);
                      });
                  });
              }
      });
}

void addDir(List args){
    if(args.isEmpty) return print(addhelp);
	var lists = args.first.split(',');
	if(!new Directory.fromPath(packages).existsSync()) return print("packages folder does not exist here!");
    lists.forEach((n){
		makeDir(home.join(new Path(n)),(dir){
         	link(dir.path);
    	});
	});
}

void link(path,[Path fr]){
    var loc = null; var from = (fr != null) ? fr : packages;
	if(path is String) loc = new Path(path);
	else loc = home;
	
    try{
         var ln = new Link.fromPath(loc.join(new Path('packages')));
         ln.createSync(from.toString());
         print('---> Adding SymLink for Pubpackages as ${ln.path}!');
    }on LinkException catch(e){
           print('Unable to create symlink for packages or a folder/symlink with the same name exists!');
           // print(makehelp);
    }catch(e){
           throw new Exception('Unable to find ${packages} folder');
    }
}

void init(){
    var pac = new Directory.fromPath(packages);
    if(!pac.existsSync()) pac.createSync(recursive:false);
}

void printHelp(){
      print(help);
      print(inithelp);
      print(makehelp);
      print(addhelp);
      //print(linkhelp);
}

void main(){

    //init();
	
    var ops = new Options();
    if(ops.arguments.length <= 0) return printHelp(); 

    var args = ops.arguments;
    var cmd = args.first;

    args.remove(cmd);

    switch(cmd){
        case ':init':
               init();
               break;
        // case ':link':
        //        link(home.toString());
        //        break;
        case ':create':
               make(args);
               break;
        case ':add':
               addDir(args);
               break;
        default:
               printHelp();
               break;
    }
}
